@using ConnectFour

@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: black;  /** el color del tablero **/
            --player1: red;      /** el color de la pieza del jugador 1 **/
            --player2: blue;     /** el color de la pieza del jugador 2 **/
        }
    </style>
</HeadContent>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click para colocar una pieza" @onclick="() => PlayPiece(col)">🔽</span>
    }
</nav>

<article>
    @winnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
    </div>
    @for (var i = 0; i < 42; i++)
    {
        <span class="@pieces[i]"></span>
    }
</div>
@code {
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Turno del jugador {State.PlayerTurn}" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";

    private void PlayPiece(byte col)
    {
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }

        winnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Ha ganado el jugador 1",
            GameState.WinState.Player2_Wins => "Ha ganado el jugador 2",
            GameState.WinState.Tie => "Es un empate",
            _ => ""
        };

    }

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }
}